ApiRestGo

Inicializacion de Git:

git init
git status
git add .
git commit -m "gorm, connection, create tablets commit"
git branch -M main
git remote add origin https://github.com/gmayas/ApiRestGo.git
git push -u origin main

Inicializacion del proytecto:

Poner una URL unica, es te caso, github.com/gmayas/ApiRestGo.

go mod init github.com/gmayas/ApiRestGo

Crear main.go

Ir a https://github.com/gorilla/mux

Package gorilla/mux implements a request router and dispatcher for matching incoming requests to their respective handler.

The name mux stands for "HTTP request multiplexer". Like the standard http.ServeMux, mux.Router matches incoming requests against a list of registered routes and calls a handler for the route that matches the URL or other conditions. The main features are:

It implements the http.Handler interface so it is compatible with the standard http.ServeMux.
Requests can be matched based on URL host, path, path prefix, schemes, header and query values, HTTP methods or using custom matchers.
URL hosts, paths and query values can have variables with an optional regular expression.
Registered URLs can be built, or "reversed", which helps maintaining references to resources.
Routes can be used as subrouters: nested routes are only tested if the parent route matches. This is useful to define groups of routes that share common conditions like a host, a path prefix or other repeated attributes. As a bonus, this optimizes request matching.

Install:

go get -u github.com/gorilla/mux

Run project:

go run .


Ir a. https://github.com/air-verse/air

Is a Live reload for Go apps

Intall:

go install github.com/air-verse/air@latest

Inicializacion

air init

Solo escriba:

air

Y se reinicia el servicio.


Entrar a https://gorm.io/

La fantástica biblioteca ORM para Golang

ORM con todas las funciones
Asociaciones (tiene uno, tiene muchos, pertenece a, muchos a muchos, polimorfismo, herencia de tabla única)
Ganchos (antes/después de crear/guardar/actualizar/eliminar/buscar)
Carga ansiosa con precarga, uniones
Transacciones, Transacciones anidadas, Punto de guardado, Revertir al punto guardado
Contexto, modo de declaración preparada, modo de ejecución en seco
Inserción por lotes, Buscar en lotes, Buscar/Crear con mapa, CRUD con SQL Expr y Context Valuer
SQL Builder, Upsert, Bloqueo, Optimizador/Índice/Sugerencias de comentarios, Argumento con nombre, Subconsulta
Clave principal compuesta, índices, restricciones
Migraciones automáticas
Registrador
API de complemento extensible y flexible: Resolución de bases de datos (múltiples bases de datos, división de lectura/escritura) / Prometheus…
Cada función viene con pruebas.
Amigable para desarrolladores

Install:

go get -u gorm.io/gorm

Install driver postgres:

go get -u gorm.io/driver/postgres


Instalacion del Contenedor de PostgreSQL
Lo primero es descargar el contenedore:

docker pull postgres

EL siguiente comando es uno de los que más uso cuando desarrollo con postgres

docker run --name go-apirest-postgres -e POSTGRES_USER=gouser -e POSTGRES_PASSWORD=gopassswor -e POSTGRES_DB=godb -p 5400:5432 -d postgres

psql -U gouser --db godb