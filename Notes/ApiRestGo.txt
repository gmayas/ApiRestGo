ApiRestGo

Inicializacion de Git:

git init
git status
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/gmayas/ApiRestGo.git
git push -u origin main

Inicializacion del proytecto:

Poner una URL unica, es te caso, github.com/gmayas/ApiRestGo.

go mod init github.com/gmayas/ApiRestGo

Crear main.go

Ir a https://github.com/gorilla/mux

Package gorilla/mux implements a request router and dispatcher for matching incoming requests to their respective handler.

The name mux stands for "HTTP request multiplexer". Like the standard http.ServeMux, mux.Router matches incoming requests against a list of registered routes and calls a handler for the route that matches the URL or other conditions. The main features are:

It implements the http.Handler interface so it is compatible with the standard http.ServeMux.
Requests can be matched based on URL host, path, path prefix, schemes, header and query values, HTTP methods or using custom matchers.
URL hosts, paths and query values can have variables with an optional regular expression.
Registered URLs can be built, or "reversed", which helps maintaining references to resources.
Routes can be used as subrouters: nested routes are only tested if the parent route matches. This is useful to define groups of routes that share common conditions like a host, a path prefix or other repeated attributes. As a bonus, this optimizes request matching.

Install:

go get -u github.com/gorilla/mux

Run project:

go run .


Ir a. https://github.com/air-verse/air

Is a Live reload for Go apps

Intall:

go install github.com/air-verse/air@latest

Inicializacion

air init

Solo escriba:

air

Y se reinicia el servicio.